{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "name": "Product API",
    "description": "Collection for testing the Product API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    },
    {
      "key": "idToken",
      "value": "{{idToken}}",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Get Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.environment.set('idToken', response.AuthenticationResult.IdToken);",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Token received\", function () {",
                  "    pm.expect(response.AuthenticationResult.IdToken).to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-amz-json-1.1"
              },
              {
                "key": "X-Amz-Target",
                "value": "AWSCognitoIdentityProviderService.InitiateAuth"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"AuthFlow\": \"USER_PASSWORD_AUTH\",\n    \"ClientId\": \"{{cognitoClientId}}\",\n    \"AuthParameters\": {\n        \"USERNAME\": \"{{username}}\",\n        \"PASSWORD\": \"{{password}}\"\n    }\n}"
            },
            "url": {
              "raw": "https://cognito-idp.{{region}}.amazonaws.com/",
              "protocol": "https",
              "host": [
                "cognito-idp",
                "{{region}}",
                "amazonaws",
                "com"
              ],
              "path": [
                ""
              ]
            },
            "description": "Get an authentication token from Cognito"
          },
          "response": []
        }
      ],
      "description": "Authentication operations"
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Create Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.environment.set('productId', response.id);",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Product created successfully\", function () {",
                  "    pm.expect(response.id).to.not.be.empty;",
                  "    pm.expect(response.name).to.eql(\"Test Product\");",
                  "    pm.expect(response.status).to.eql(\"ACTIVE\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{idToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Product\",\n    \"description\": \"A test product created via Postman\",\n    \"productType\": \"Electronics\",\n    \"productCategory\": \"Test\",\n    \"brand\": \"Test Brand\",\n    \"manufacturer\": \"Test Manufacturer\",\n    \"sku\": \"TEST-123\",\n    \"price\": {\n        \"amount\": 99.99,\n        \"currency\": \"USD\"\n    },\n    \"dimensions\": {\n        \"height\": 10,\n        \"width\": 20,\n        \"depth\": 5,\n        \"weight\": 1.5,\n        \"unitOfMeasure\": \"cm\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products"
              ]
            },
            "description": "Create a new product"
          },
          "response": []
        },
        {
          "name": "Get Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Product retrieved successfully\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.environment.get('productId'));",
                  "    pm.expect(response.name).to.eql(\"Test Product\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{idToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{productId}}"
              ]
            },
            "description": "Get a product by ID"
          },
          "response": []
        },
        {
          "name": "List Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Products list returned\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.products).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{idToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products?limit=10&filter.productType=Electronics",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "filter.productType",
                  "value": "Electronics"
                }
              ]
            },
            "description": "List products with optional filtering"
          },
          "response": []
        },
        {
          "name": "Update Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Product updated successfully\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.environment.get('productId'));",
                  "    pm.expect(response.name).to.eql(\"Updated Product Name\");",
                  "    pm.expect(response.price.amount).to.eql(149.99);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{idToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Updated Product Name\",\n    \"description\": \"Updated product description\",\n    \"price\": {\n        \"amount\": 149.99,\n        \"currency\": \"USD\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{productId}}"
              ]
            },
            "description": "Update an existing product"
          },
          "response": []
        },
        {
          "name": "Delete Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{idToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{productId}}"
              ]
            },
            "description": "Delete a product"
          },
          "response": []
        },
        {
          "name": "Verify Product Deleted",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{idToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{productId}}"
              ]
            },
            "description": "Verify that the product was deleted"
          },
          "response": []
        }
      ],
      "description": "Product operations"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}
